"use strict";
var goal_1 = require("./goal");
exports.Goal = goal_1.default;
var TokenType;
(function (TokenType) {
    TokenType[TokenType["Raw"] = 0] = "Raw";
    TokenType[TokenType["Comment"] = 1] = "Comment";
    TokenType[TokenType["GoalBracket"] = 2] = "GoalBracket";
    TokenType[TokenType["GoalQMRaw"] = 3] = "GoalQMRaw";
    TokenType[TokenType["GoalQM"] = 4] = "GoalQM";
})(TokenType || (TokenType = {}));
exports.TokenType = TokenType;
var Agda;
(function (Agda) {
    (function (ResponseType) {
        ResponseType[ResponseType["InfoAction"] = 0] = "InfoAction";
        ResponseType[ResponseType["StatusAction"] = 1] = "StatusAction";
        ResponseType[ResponseType["GoalsAction"] = 2] = "GoalsAction";
        ResponseType[ResponseType["GiveAction"] = 3] = "GiveAction";
        ResponseType[ResponseType["ParseError"] = 4] = "ParseError";
        ResponseType[ResponseType["Goto"] = 5] = "Goto";
        ResponseType[ResponseType["SolveAllAction"] = 6] = "SolveAllAction";
        ResponseType[ResponseType["MakeCaseAction"] = 7] = "MakeCaseAction";
        ResponseType[ResponseType["MakeCaseActionExtendLam"] = 8] = "MakeCaseActionExtendLam";
        ResponseType[ResponseType["HighlightClear"] = 9] = "HighlightClear";
        ResponseType[ResponseType["HighlightAddAnnotations"] = 10] = "HighlightAddAnnotations";
        ResponseType[ResponseType["HighlightLoadAndDeleteAction"] = 11] = "HighlightLoadAndDeleteAction";
        ResponseType[ResponseType["UnknownAction"] = 12] = "UnknownAction";
    })(Agda.ResponseType || (Agda.ResponseType = {}));
    var ResponseType = Agda.ResponseType;
    (function (InfoActionType) {
        InfoActionType[InfoActionType["AllGoals"] = 0] = "AllGoals";
        InfoActionType[InfoActionType["Error"] = 1] = "Error";
        InfoActionType[InfoActionType["TypeChecking"] = 2] = "TypeChecking";
        InfoActionType[InfoActionType["CurrentGoal"] = 3] = "CurrentGoal";
        InfoActionType[InfoActionType["InferredType"] = 4] = "InferredType";
        InfoActionType[InfoActionType["ModuleContents"] = 5] = "ModuleContents";
        InfoActionType[InfoActionType["Context"] = 6] = "Context";
        InfoActionType[InfoActionType["GoalTypeEtc"] = 7] = "GoalTypeEtc";
        InfoActionType[InfoActionType["NormalForm"] = 8] = "NormalForm";
        InfoActionType[InfoActionType["Intro"] = 9] = "Intro";
        InfoActionType[InfoActionType["Auto"] = 10] = "Auto";
        InfoActionType[InfoActionType["Constraints"] = 11] = "Constraints";
        InfoActionType[InfoActionType["ScopeInfo"] = 12] = "ScopeInfo";
    })(Agda.InfoActionType || (Agda.InfoActionType = {}));
    var InfoActionType = Agda.InfoActionType;
})(Agda || (Agda = {}));
exports.Agda = Agda;
var CommandType;
(function (CommandType) {
    CommandType[CommandType["Load"] = 0] = "Load";
    CommandType[CommandType["Quit"] = 1] = "Quit";
    CommandType[CommandType["Restart"] = 2] = "Restart";
    CommandType[CommandType["Compile"] = 3] = "Compile";
    CommandType[CommandType["ToggleDisplayOfImplicitArguments"] = 4] = "ToggleDisplayOfImplicitArguments";
    CommandType[CommandType["Info"] = 5] = "Info";
    CommandType[CommandType["ShowConstraints"] = 6] = "ShowConstraints";
    CommandType[CommandType["SolveConstraints"] = 7] = "SolveConstraints";
    CommandType[CommandType["ShowGoals"] = 8] = "ShowGoals";
    CommandType[CommandType["NextGoal"] = 9] = "NextGoal";
    CommandType[CommandType["PreviousGoal"] = 10] = "PreviousGoal";
    CommandType[CommandType["WhyInScope"] = 11] = "WhyInScope";
    CommandType[CommandType["InferType"] = 12] = "InferType";
    CommandType[CommandType["ModuleContents"] = 13] = "ModuleContents";
    CommandType[CommandType["ComputeNormalForm"] = 14] = "ComputeNormalForm";
    CommandType[CommandType["ComputeNormalFormIgnoreAbstract"] = 15] = "ComputeNormalFormIgnoreAbstract";
    CommandType[CommandType["Give"] = 16] = "Give";
    CommandType[CommandType["Refine"] = 17] = "Refine";
    CommandType[CommandType["Auto"] = 18] = "Auto";
    CommandType[CommandType["Case"] = 19] = "Case";
    CommandType[CommandType["GoalType"] = 20] = "GoalType";
    CommandType[CommandType["Context"] = 21] = "Context";
    CommandType[CommandType["GoalTypeAndContext"] = 22] = "GoalTypeAndContext";
    CommandType[CommandType["GoalTypeAndInferredType"] = 23] = "GoalTypeAndInferredType";
    CommandType[CommandType["InputSymbol"] = 24] = "InputSymbol";
})(CommandType || (CommandType = {}));
exports.CommandType = CommandType;
var View;
(function (View) {
    (function (Type) {
        Type[Type["PlainText"] = 0] = "PlainText";
        Type[Type["Error"] = 1] = "Error";
        Type[Type["Warning"] = 2] = "Warning";
        Type[Type["Judgement"] = 3] = "Judgement";
        Type[Type["Value"] = 4] = "Value";
    })(View.Type || (View.Type = {}));
    var Type = View.Type;
    (function (ErrorType) {
        ErrorType[ErrorType["NotInScope"] = 0] = "NotInScope";
        ErrorType[ErrorType["TypeMismatch"] = 1] = "TypeMismatch";
        ErrorType[ErrorType["DefinitionTypeMismatch"] = 2] = "DefinitionTypeMismatch";
        ErrorType[ErrorType["BadConstructor"] = 3] = "BadConstructor";
        ErrorType[ErrorType["RHSOmitted"] = 4] = "RHSOmitted";
        ErrorType[ErrorType["MissingType"] = 5] = "MissingType";
        ErrorType[ErrorType["MultipleDefinition"] = 6] = "MultipleDefinition";
        ErrorType[ErrorType["MissingDefinition"] = 7] = "MissingDefinition";
        ErrorType[ErrorType["Termination"] = 8] = "Termination";
        ErrorType[ErrorType["ConstructorTarget"] = 9] = "ConstructorTarget";
        ErrorType[ErrorType["FunctionType"] = 10] = "FunctionType";
        ErrorType[ErrorType["ModuleMismatch"] = 11] = "ModuleMismatch";
        ErrorType[ErrorType["Parse"] = 12] = "Parse";
        ErrorType[ErrorType["CaseSingleHole"] = 13] = "CaseSingleHole";
        ErrorType[ErrorType["Unparsed"] = 14] = "Unparsed";
    })(View.ErrorType || (View.ErrorType = {}));
    var ErrorType = View.ErrorType;
})(View || (View = {}));
exports.View = View;

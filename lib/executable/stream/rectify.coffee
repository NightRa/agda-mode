{Transform} = require 'stream'

# concatenates outputs generated by Agda executable,
# "Agda2>" and newline as delimiter
class Rectify extends Transform

    constructor: ->
        super
            objectMode: true

    _buffer: ''
    _parentheseCount: 0

    _transform: (chunk, encoding, next) ->
        # console.log chunk.toString()
        # helper functions from Haskell <3
        drop = (n, str) -> str.substr n
        take = (n, str) -> str.substr 0, n
        min  = (a, b)   -> a < b ? a : b

        # strips "Agda2>" prefix
        chunk = chunk.toString().replace('Agda2>', '')

        # iterate through the chunk
        # parentheseCount +1 when encountered a '('
        # parentheseCount -1 when encountered a ')'
        # @push when parentheseCount is 0

        cursorOnChunk = 0
        for i in [0..chunk.length]
            switch chunk.charAt i
                when '('
                    @_parentheseCount += 1
                when ')'
                    @_parentheseCount -= 1
                    if @_parentheseCount is 0
                        output = @_buffer + drop(cursorOnChunk, take(i + 1, chunk))
                        @push output.trim()
                        @_buffer = ''
                        cursorOnChunk = i + 1
        @_buffer += drop cursorOnChunk, chunk
        next()


module.exports = Rectify

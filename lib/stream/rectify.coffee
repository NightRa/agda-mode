{Transform} = require 'stream'

# concatenates outputs generated by Agda executable,
# "Agda2>" and newline as delimiter
class Rectify extends Transform

  constructor: ->
    super
      objectMode: true

  _buffer: ''

  _transform: (chunk, encoding, next) ->

    # helper functions from Haskell <3
    drop = (n, str) -> str.substr n
    take = (n, str) -> str.substr 0, n

    # concat to buffer as String
    @_buffer += chunk.toString()

    # rips "Agda2>"" prefix
    if @_buffer.startsWith 'Agda2>'
      @_buffer = take 6, @_buffer

    # "Agda2>" as delimeter
    delimeterIndex = @_buffer.lastIndexOf 'Agda2>'
    if delimeterIndex isnt -1

      block = take delimeterIndex, @_buffer
      # newline as delimeter
      for string in block.split '\n'
        # ignores empty newline
        if string.length isnt 0
          @push string

      @_buffer = drop (delimeterIndex + 6), @_buffer

    next()

module.exports = Rectify
